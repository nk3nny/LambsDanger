name = "LAMBS Danger"
prefix = "lambs"
author = "LAMBS Dev Team"
sig_version = 3
version = "2.5.2"
reuse_private_key = false
files = [
    "mod.cpp",
    "*.paa",
    "LICENSE",
    "readme.txt",
    "readme.md"
]
include = ["./include"]

key_name = "{{prefix}}_danger_{{version}}"
authority = "{{prefix}}_danger_{{version}}-{{git \"id 8\"}}"

check = [
    "!version_set",
    "!compile_scripts"
]

postbuild = [
    "!version_unset",
    "!remove_compiled_scripts"
]

releasebuild = [
    "!version_set_release",
    "@zip @LambsDanger_{{semver.major}}_{{semver.minor}}_{{semver.patch}}"
]

[header_exts]
version = "{{version}}_{{git \"id 8\"}}"

[scripts.version_set]
steps_linux = [
    "echo 'Setting version'",
    "sed -i -r -s 's/#define MAJOR 0/#define MAJOR {{semver.major}}/g' addons/main/script_version.hpp",
    "sed -i -r -s 's/#define MINOR 0/#define MINOR {{semver.minor}}/g' addons/main/script_version.hpp",
    "sed -i -r -s 's/#define PATCHLVL 0/#define PATCHLVL {{semver.patch}}/g' addons/main/script_version.hpp",
]
steps_windows = [
    "echo 'Setting version'",
    "powershell -Command foreach ($f in 'addons/main/script_version.hpp') {(Get-Content $f) -replace '#define MAJOR 0', '#define MAJOR {{semver.major}}' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
    "powershell -Command foreach ($f in 'addons/main/script_version.hpp') {(Get-Content $f) -replace '#define MINOR 0', '#define MINOR {{semver.minor}}' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
    "powershell -Command foreach ($f in 'addons/main/script_version.hpp') {(Get-Content $f) -replace '#define PATCHLVL 0', '#define PATCHLVL {{semver.patch}}' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
]
only_release = true
show_output = true

[scripts.version_unset]
steps_linux = [
    "echo 'Unsetting version'",
    "sed -i -r -s 's/#define MAJOR {{semver.major}}/#define MAJOR 0/g' addons/main/script_version.hpp",
    "sed -i -r -s 's/#define MINOR {{semver.minor}}/#define MINOR 0/g' addons/main/script_version.hpp",
    "sed -i -r -s 's/#define PATCHLVL {{semver.patch}}/#define PATCHLVL 0/g' addons/main/script_version.hpp",
]
steps_windows = [
    "echo 'Unsetting version'",
    "powershell -Command foreach ($f in 'addons/main/script_version.hpp') {(Get-Content $f) -replace '#define MAJOR {{semver.major}}', '#define MAJOR 0' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
    "powershell -Command foreach ($f in 'addons/main/script_version.hpp') {(Get-Content $f) -replace '#define MINOR {{semver.minor}}', '#define MINOR 0' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
    "powershell -Command foreach ($f in 'addons/main/script_version.hpp') {(Get-Content $f) -replace '#define PATCHLVL {{semver.patch}}', '#define PATCHLVL 0' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
]
only_release = true
show_output = true

[scripts.version_set_release]
steps_linux = [
    "sed -i -r -s 's/\\{version\\}/{{semver.major}}.{{semver.minor}}.{{semver.patch}}/g' releases/{{semver.major}}.{{semver.minor}}.{{semver.patch}}/@lambs/mod.cpp",
]
steps_windows = [
    "powershell -Command foreach ($f in 'releases/{{semver.major}}.{{semver.minor}}.{{semver.patch}}/@lambs/mod.cpp') {(Get-Content $f) -replace '{version}', '{{semver.major}}.{{semver.minor}}.{{semver.patch}}' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
]
only_release = true
show_output = true

[scripts.uncomment_isdev]
steps_linux = [
    "echo 'Uncommenting #define ISDEV'",
    "sed -i -r -s 's:// #define ISDEV:#define ISDEV:g' addons/Streamator/macros.hpp",
]
steps_windows = [
    "echo 'Uncommenting #define ISDEV'",
    "powershell -Command foreach ($f in 'addons/Streamator/macros.hpp') {(Get-Content $f) -replace '// #define ISDEV', '#define ISDEV' -join \"`n\" ^| Set-Content -NoNewline $f; Add-Content -NoNewline \"`n\" $f}",
]

only_release = true
show_output = true

[scripts.compile_scripts]
steps_windows = [
    "echo 'Compile Arma Scripts'",
    "ArmaScriptCompiler.exe"
]

steps_linux = [
    "echo 'Compiling Arma Scripts does not work yet on Linux'"
]
only_release = true
show_output = false

[scripts.remove_compiled_scripts]
steps_windows = [
    "echo 'remove Compiled Scripts'",
    "powershell -Command Remove-Item './addons/*' -Recurse -Include *.sqfc"
]
steps_linux = [
    "echo 'Compiling Arma Scripts does not work yet on Linux'"
]
only_release = true
show_output = true
